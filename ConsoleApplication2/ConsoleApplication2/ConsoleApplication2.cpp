#include "stdafx.h"
//test

class A
{
public:
	A();
	~A();
};

A::A()
{
}

A::~A()
{
}

class B:public A
{
public:
	B();
};

B::B()
{
	//
}

void fun(char *s1, char *s2)
{
	char *p0, *p1, *p2;
	p0 = p1 = s1;
	while (*p0)
	{
		p2 = s2;
		while (*p2 && (*p0 != *p2))
		{
			p2++;
		}
		if (*p2 == '\0')
		{
			*p1++;
		}
		p0++;
	}
	*p1 = '\0';
}

#include<vector>
using namespace std;
vector<char> vecChar;

void funcCur(char *src, char *target)
{
	char *sor, *s1, *s2;
	sor = target;
	s1 = src;
	s2 = target;

	while (*s1)
	{
		if (*s1 != *s2)
		{
			*s2++;
			if (*s1 != *s2)
			{
				*s2++;
				if (*s1 != *s2)
				{
					//printf("%c3_\n", *s2);
					vecChar.push_back(*s1);
					s2 = sor;
				}
				else
				{
					s2 = sor;
				}
			}
			else
			{
				s2 = sor;
			}
		}
		else
		{
			s2 = sor;
		}
		*s1++;
		printf("%c\n", *s1);
	}

	for (size_t i = 0; i < vecChar.size(); i++)
	{
		printf("%c", vecChar[i]);
	}
	printf("\n");
}


bool value(char n, char m)
{
	if (m != n)
	{
		if (m)
		{
			value(n, m++);
		}
		else
		{
			return true;
		}
	}
}

int main(void)
{
	/*printf("%d_",value("1234", "13"));*/

	char *sor = "123456789";
	char *s1 = "1664144673408069507642765638392826197422813233504244691074142861615033319582268580743398596900149015881921609023621484052985454803421971344687614707512993117467944021938064148756154378296788356873290660410731594595764762400082225237518949676334008404877766069669504354499394973571514280825379431391822008922528443567907238296571111713005438638401256989057510823332237882163150872012591303965504165416397050577831869221483762485500759411441091863221258562751934486280975747049715991870665530440711981594655103163970032297953977307256257954713285808266466217871918675679404501424582544971874260913454239888374150814056264415130698349686375358636876951045173225302476931947294354543845354112757773683683708474306771296728759509608687377063460299061727026695185699630048058977758575943051263833807492784932945422916467695731045642102568928008448193648097615521134503845972375960078826772902443186430859483703445066316028783206733385697782506417415338299931898102592151559276279186502158261254273470762137869158794758961873888261773746741670222141323367591145551447818605727872735159449737492611642448428456923091659148560487852174650703832829201757475908314033978433767057313823742415024214700449235853776684626398721774712831214372964956374545514935302825324276275564145310074005601232749243687455809582944978797877937057918365521939744603624344771524780461825495545674264755699215544861439249253704366090655685809680300979951128179067963407820438588926173624164467224437845869441315770797210161722561234693316654624097487003550803700456787184506289135976131688290152453706527060196871292968446837672784356685067109345435137434893512815803947091295162244562559502386517589851225118045313139885033324009730587246813244419834628864886302739097768451272770551954717137409363881058039022624014623355213194731147303947382637997094918275516259782354624097487003550803700456787184506289135976131688290152453706527060196871292968446837672784356685067109345435137434893512815803947091295162244562559502386517589851225118045313139885033324009730587246813244419834628864886302739097768451272770551954717137409363881058039022624014623355213194731147303947382637997094918275516259782386138995413181656139047214365437319195485659759654569511216066838632823759504258850809260061099618477789112632781000074147583583735028981815382842111755610297470307336302629214959675373184109220166009368313133562541048549176839403147105553261460696948613899541318165613904721436543731919548565975965456951121606683863282375950425885080926006109961847778911263546240974870035508037004567871845062891359761316882901524537065270601968712929684468376727843566850671093455465462409748700355080370045678718450628913597613168829015245370652706019687129296844683767278435668506710934543513743489351281580394709129516224456255950238651758985122511804531313988503332400973058724681324441983462886488630273909776845127277055195471713740936388105803902262401462335521319473114730394738263799709491827551625978238613899541318165613904721436543731919548565975965456951121606683863282375950425885080926006109961847778911263278100007414758358373502898181538284211175561029747030733630262921495967537318410922016600936831313356254104854917683940314710555326146069694240974870035508037004567871845062891359761316882901524537065270601968712929684468376727843566850671093454351374348935128158039470912951622445625595023865175898512251180453131398850333240097305872468132444198346288648863027390977684512727705519547171374093638810580390226240146233552131947311473039473826379970949182755162597823861389954131816561390472143654373191954856597596545695112160668386328237595042588508092600610996184777891126327810000741475835837350289818153828421117556102974703073363026292149596753731841092201660093683131335625410485491768394031471055532614606969443513743489351281580394709129516224456255950238651758985122511804531313988503332400973058724681324441983462886488630273909776845127277055195471713740936388105803902262401462335521319473114730394738263799709491827551625978238613899541318165613904721436543731919548565975965456951121606683863282375950425885080926006109961847778911263278100007414758358373502898181538284211175561029747030733630262921495967537318410922016600936831313356254104854917683940314710555326146069694278100007414758358373502898181538284211175561029747030733630262921495967537318410922016600936831313356254104854917683940314710555326146069694555807993878498743113191520498894035425400222631384";

	//funcCur(s1, sor);

	//char *str = "1234567890";
	//char *target = "15";
	//char *temp = target;

	//int number = 5;
	//for (size_t j = 0; j < 10; j++)
	//{
	//	for (size_t i = 0; i < 2; i++)
	//	{
	//		if (temp[i] != str[j])
	//		{
	//			//
	//			printf("%c_", str[j]);
	//			break;
	//		}
	//	}
	//}

	int num[] = { 1,3,6 };
	int tar[] = { 1,2,3,4,5,6,7,8,9 };
	for (size_t i = 0; i < 9; i++)
	{
		for (size_t j = 0; j < 3; j++)
		{
			if (num[j] == tar[i])
			{
				//
				tar[i] = 0;
			}
		}
	}
	return 0;
}
